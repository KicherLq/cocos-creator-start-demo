{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Global/DataManager.ts"],"names":["DataManager","Singleton","EntityTypeEnum","InputTypeEnum","EventManager","EventEnum","ACTOR_SPEED","BULLET_SPEED","MAP_WIDTH","MAP_HEIGHT","ACTOR_RADIUS","BULLET_RADIUS","myPlayerId","jm","stage","actorMap","Map","bulletMap","prefabMap","textureMap","state","actors","id","type","Actor1","hp","weaponType","Weapon1","bulletType","Bullet2","position","x","y","direction","bullets","nextBulletId","Instance","GetInstance","applyInput","input","ActorMove","deltaTime","actor","find","e","Shot","owner","bullet","get","emit","bulletBorn","push","TimePast","dt","i","length","j","distanceX","distanceY","explosionX","explosionY","explosionBorn","splice","Math","abs"],"mappings":"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","sourcesContent":["import { Prefab, instantiate } from 'cc';\nimport Singleton from \"../Base/Singleton\";\nimport { IActorMove, IBullet, IClientInput, IState } from \"../Common/State\";\nimport { ActorManager } from \"../Entity/Actor/ActorManager\";\nimport { JoyStickManager } from \"../UI/JoyStickManager\";\nimport { EntityTypeEnum, InputTypeEnum } from \"../Common/Enum\";\nimport { SpriteFrame } from \"cc\";\nimport { Node } from \"cc\";\nimport { BulletManager } from '../Entity/Bullet/BulletManager';\nimport EventManager from \"./EventManager\";\nimport { EventEnum } from \"../Enum\";\n\nconst ACTOR_SPEED = 100;\nconst BULLET_SPEED = 600;\nconst MAP_WIDTH = 960;\nconst MAP_HEIGHT = 640;\nconst ACTOR_RADIUS = 50;\nconst BULLET_RADIUS = 10;\n\nexport default class DataManager extends Singleton {\n\tstatic get Instance() {\n\t\treturn super.GetInstance<DataManager>();\n\t}\n\n    myPlayerId: number = 1;\n    jm: JoyStickManager;\n    stage: Node;\n    actorMap: Map<number, ActorManager> = new Map();\n    bulletMap: Map<number, BulletManager> = new Map();\n    prefabMap: Map<string, Prefab> = new Map();\n    textureMap: Map<string, SpriteFrame[]> = new Map();\n\n    state: IState = {\n        actors:[\n            { \n                id: 1, \n                type: EntityTypeEnum.Actor1,\n                hp: 100,\n                weaponType: EntityTypeEnum.Weapon1,\n                bulletType: EntityTypeEnum.Bullet2,\n                position: {\n                    x: -150, \n                    y: -150\n                }, \n                direction: {\n                    x: 1, \n                    y: 0\n                },\n            },\n            { \n                id: 2, \n                type: EntityTypeEnum.Actor1,\n                hp: 100,\n                weaponType: EntityTypeEnum.Weapon1,\n                bulletType: EntityTypeEnum.Bullet2,\n                position: {\n                    x: 150, \n                    y: 150\n                }, \n                direction: {\n                    x: -1, \n                    y: 0\n                },\n            },\n        ],\n        bullets: [\n\n        ],\n        nextBulletId: 1,\n    }\n\n    applyInput(input: IClientInput) {\n        switch (input.type) {\n            case InputTypeEnum.ActorMove: {\n                const { deltaTime, direction, type, id } = input;\n                const actor = this.state.actors.find(e => e.id === id);\n                actor.direction = direction;\n\n                actor.position.x += direction.x * deltaTime * ACTOR_SPEED;\n                actor.position.y += direction.y * deltaTime * ACTOR_SPEED;\n                break;\n            }\n            case InputTypeEnum.Shot: {\n                const { owner, direction, position } = input;\n                const bullet: IBullet = {\n                    id: this.state.nextBulletId++,\n                    owner, \n                    direction,\n                    position,\n                    type: this.actorMap.get(owner).bulletType,\n                }\n\n                EventManager.Instance.emit(EventEnum.bulletBorn, owner);\n                this.state.bullets.push(bullet);\n                break;\n            }\n            case InputTypeEnum.TimePast: {\n                const {dt} = input;\n                const {bullets, actors} = this.state;\n                \n                //倒序遍历子弹用于销毁已经飞出地图外的子弹\n                for(let i = bullets.length - 1; i >= 0; --i) {\n                    const bullet = bullets[i];\n                    //倒序遍历角色用于判断和子弹的碰撞检测\n                    for(let j = actors.length - 1; j >= 0; --j) {\n                        const actor = actors[j];\n                        //帧同步不能使用引擎内部的碰撞检测系统\n                        let distanceX: number = actor.position.x - bullet.position.x;\n                        let distanceY: number = actor.position.y - bullet.position.y;\n                        let explosionX: number = (actor.position.x + bullet.position.x) / 2;\n                        let explosionY: number = (actor.position.y + bullet.position.y) / 2;\n                        if(distanceX ** 2 + distanceY ** 2 < (ACTOR_RADIUS + BULLET_RADIUS) ** 2) {\n                            EventManager.Instance.emit(EventEnum.explosionBorn, bullet.id, {x: explosionX, y: explosionY});\n                            bullets.splice(i, 1);\n                            break;\n                        }\n                    }\n                    if(Math.abs(bullet.position.x) > MAP_WIDTH / 2 || Math.abs(bullet.position.y) > MAP_HEIGHT / 2) {\n                        EventManager.Instance.emit(EventEnum.explosionBorn, bullet.id, {x: bullet.position.x, y: bullet.position.y});\n                        bullets.splice(i, 1);\n                        break;\n                    }\n                }\n\n                for (const bullet of bullets) {\n                    bullet.position.x += bullet.direction.x * dt * BULLET_SPEED;\n                    bullet.position.y += bullet.direction.y * dt * BULLET_SPEED;\n                }\n                break;\n            }\n        }\n\n    }\n}\n"]}