{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Global/DataManager.ts"],"names":["DataManager","Singleton","EntityTypeEnum","ACTOR_SPEED","jm","actorMap","Map","prefabMap","state","actors","id","type","Actor1","position","x","y","direction","Instance","GetInstance","applyInput","input","deltaTime","actor","find","e"],"mappings":";;;0GASqBA,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AARdC,MAAAA,S;;AAIEC,MAAAA,c,iBAAAA,c;;;;;;;;;AAEHC,MAAAA,W,GAAc,G;;yBAECH,W,GAAN,MAAMA,WAAN;AAAA;AAAA,kCAAoC;AAAA;AAAA;AAAA,eAK/CI,EAL+C;AAAA,eAM/CC,QAN+C,GAMT,IAAIC,GAAJ,EANS;AAAA,eAO/CC,SAP+C,GAOd,IAAID,GAAJ,EAPc;AAAA,eAS/CE,KAT+C,GAS/B;AACZC,YAAAA,MAAM,EAAC,CACH;AACIC,cAAAA,EAAE,EAAE,CADR;AAEIC,cAAAA,IAAI,EAAE;AAAA;AAAA,oDAAeC,MAFzB;AAGIC,cAAAA,QAAQ,EAAE;AACNC,gBAAAA,CAAC,EAAE,CADG;AAENC,gBAAAA,CAAC,EAAE;AAFG,eAHd;AAOIC,cAAAA,SAAS,EAAE;AACPF,gBAAAA,CAAC,EAAE,CADI;AAEPC,gBAAAA,CAAC,EAAE;AAFI;AAPf,aADG;AADK,WAT+B;AAAA;;AAC/B,mBAARE,QAAQ,GAAG;AACrB,iBAAO,MAAMC,WAAN,EAAP;AACA;;AAuBEC,QAAAA,UAAU,CAACC,KAAD,EAAoB;AAC1B,cAAM;AAACC,YAAAA,SAAD;AAAYL,YAAAA,SAAZ;AAAuBL,YAAAA,IAAvB;AAA6BD,YAAAA;AAA7B,cAAmCU,KAAzC;AACA,cAAME,KAAK,GAAG,KAAKd,KAAL,CAAWC,MAAX,CAAkBc,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAACd,EAAF,KAASA,EAArC,CAAd;AACAY,UAAAA,KAAK,CAACN,SAAN,GAAkBA,SAAlB;AAEAM,UAAAA,KAAK,CAACT,QAAN,CAAeC,CAAf,IAAoBE,SAAS,CAACF,CAAV,GAAcO,SAAd,GAA0BlB,WAA9C;AACAmB,UAAAA,KAAK,CAACT,QAAN,CAAeE,CAAf,IAAoBC,SAAS,CAACD,CAAV,GAAcM,SAAd,GAA0BlB,WAA9C;AACH;;AAjC8C,O","sourcesContent":["import { Prefab } from \"cc\";\nimport Singleton from \"../Base/Singleton\";\nimport { IActorMove, IState } from \"../Common/State\";\nimport { ActorManager } from \"../Entity/Actor/ActorManager\";\nimport { JoyStickManager } from \"../UI/JoyStickManager\";\nimport { EntityTypeEnum } from \"../Common/Enum\";\n\nconst ACTOR_SPEED = 100;\n\nexport default class DataManager extends Singleton {\n\tstatic get Instance() {\n\t\treturn super.GetInstance<DataManager>();\n\t}\n\n    jm: JoyStickManager;\n    actorMap: Map<number, ActorManager> = new Map();\n    prefabMap: Map<string, Prefab> = new Map();\n\n    state: IState = {\n        actors:[\n            { \n                id: 1, \n                type: EntityTypeEnum.Actor1,\n                position: {\n                    x: 0, \n                    y: 0\n                }, \n                direction: {\n                    x: 1, \n                    y: 0\n                },\n            },\n        ],\n    }\n\n    applyInput(input: IActorMove) {\n        const {deltaTime, direction, type, id} = input;\n        const actor = this.state.actors.find(e => e.id === id);\n        actor.direction = direction;\n        \n        actor.position.x += direction.x * deltaTime * ACTOR_SPEED;\n        actor.position.y += direction.y * deltaTime * ACTOR_SPEED;\n    }\n}\n"]}