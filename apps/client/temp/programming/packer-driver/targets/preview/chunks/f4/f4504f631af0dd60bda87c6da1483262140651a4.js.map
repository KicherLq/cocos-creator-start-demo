{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Base/SubStateMachine.ts"],"names":["SubStateMachine","constructor","fsm","_currentState","stateMachines","Map","currentState","newState","run"],"mappings":";;;8BAO8BA,e;;;;;;;;;;;;;;;;;;;;;;;AAJ9B;AACA;AACA;AACA;yBAC8BA,e,GAAf,MAAeA,eAAf,CAA+B;AAI1CC,QAAAA,WAAW,CAAQC,GAAR,EAA2B;AAAA,eAH9BC,aAG8B,GAHP,IAGO;AAAA,eAFtCC,aAEsC,GAFF,IAAIC,GAAJ,EAEE;AAAA,eAAnBH,GAAmB,GAAnBA,GAAmB;AAAG;;AAEzB,YAAZI,YAAY,GAAG;AACf,iBAAO,KAAKH,aAAZ;AACH;;AAEe,YAAZG,YAAY,CAACC,QAAD,EAAW;AACvB,cAAI,CAACA,QAAL,EAAe;AACX;AACH;;AACD,eAAKJ,aAAL,GAAqBI,QAArB;;AACA,eAAKJ,aAAL,CAAmBK,GAAnB;AACH;AAED;AACJ;AACA;;;AApB8C,O","sourcesContent":["import State from \"./State\";\nimport StateMachine from \"./StateMachine\";\n\n/***\n * 子有限状态机基类\n * 用处：例如有个idle的state，但是有多个方向，为了让主状态机更整洁，可以把同类型的但具体不同的state都封装在子状态机中\n */\nexport default abstract class SubStateMachine {\n    private _currentState: State = null;\n    stateMachines: Map<string, State> = new Map();\n\n    constructor(public fsm: StateMachine) { }\n\n    get currentState() {\n        return this._currentState;\n    }\n\n    set currentState(newState) {\n        if (!newState) {\n            return;\n        }\n        this._currentState = newState;\n        this._currentState.run();\n    }\n\n    /***\n     * 具体类实现\n     */\n    abstract run(): void;\n}\n"]}