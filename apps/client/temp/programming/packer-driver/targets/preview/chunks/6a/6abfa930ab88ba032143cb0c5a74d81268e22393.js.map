{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Entity/Actor/ActorManager.ts"],"names":["_decorator","Component","DataManager","InputTypeEnum","ccclass","property","ActorManager","init","data","update","deltaTime","Instance","jm","output","length","x","y","applyInput","id","type","ActorMove","direction","console","log","state","actors","position","render","node","setPosition"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;;AACdC,MAAAA,W;;AACEC,MAAAA,a,iBAAAA,a;;;;;;;;;OAEH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;8BAGjBM,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb,SACkCL,SADlC,CAC4C;AACxCM,QAAAA,IAAI,CAACC,IAAD,EAAe,CAElB;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB;AACtB,cAAG;AAAA;AAAA,0CAAYC,QAAZ,CAAqBC,EAArB,CAAwBC,MAAxB,CAA+BC,MAA/B,EAAH,EAA4C;AACxC,gBAAM;AAACC,cAAAA,CAAD;AAAIC,cAAAA;AAAJ,gBAAS;AAAA;AAAA,4CAAYL,QAAZ,CAAqBC,EAArB,CAAwBC,MAAvC;AACA;AAAA;AAAA,4CAAYF,QAAZ,CAAqBM,UAArB,CAAgC;AAC5BC,cAAAA,EAAE,EAAE,CADwB;AAE5BC,cAAAA,IAAI,EAAE;AAAA;AAAA,kDAAcC,SAFQ;AAG5BC,cAAAA,SAAS,EAAE;AACPN,gBAAAA,CADO;AAEPC,gBAAAA;AAFO,eAHiB;AAO5BN,cAAAA;AAP4B,aAAhC;AAUAY,YAAAA,OAAO,CAACC,GAAR,CAAY;AAAA;AAAA,4CAAYZ,QAAZ,CAAqBa,KAArB,CAA2BC,MAA3B,CAAkC,CAAlC,EAAqCC,QAArC,CAA8CX,CAA1D,EAA6D;AAAA;AAAA,4CAAYJ,QAAZ,CAAqBa,KAArB,CAA2BC,MAA3B,CAAkC,CAAlC,EAAqCC,QAArC,CAA8CV,CAA3G;AACH;AACJ;;AAEDW,QAAAA,MAAM,CAACnB,IAAD,EAAe;AACjB,eAAKoB,IAAL,CAAUC,WAAV,CAAsBrB,IAAI,CAACkB,QAAL,CAAcX,CAApC,EAAuCP,IAAI,CAACkB,QAAL,CAAcV,CAArD;AACH;;AAxBuC,O","sourcesContent":["import { _decorator, Component, input } from 'cc';\r\nimport DataManager from \"../../Global/DataManager\";\r\nimport { InputTypeEnum } from '../../Common/Enum';\r\nimport { IActor } from '../../Common/State';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('ActorManager')\r\nexport class ActorManager extends Component {\r\n    init(data: IActor) {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        if(DataManager.Instance.jm.output.length()) {\r\n            const {x, y} = DataManager.Instance.jm.output;\r\n            DataManager.Instance.applyInput({\r\n                id: 1,\r\n                type: InputTypeEnum.ActorMove,\r\n                direction: {\r\n                    x,\r\n                    y\r\n                },\r\n                deltaTime,\r\n            });\r\n\r\n            console.log(DataManager.Instance.state.actors[0].position.x, DataManager.Instance.state.actors[0].position.y);\r\n        }\r\n    }\r\n\r\n    render(data: IActor) {\r\n        this.node.setPosition(data.position.x, data.position.y);\r\n    }\r\n}"]}