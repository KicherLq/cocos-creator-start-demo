{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Scene/BattleManager.ts"],"names":["_decorator","Component","Prefab","instantiate","DataManager","JoyStickManager","ActorManager","ResourceManager","PrefabPathEnum","ccclass","property","BattleManager","_stage","_ui","shouldUpdate","onLoad","node","getChildByName","destroyAllChildren","Instance","jm","getComponentInChildren","start","loadRes","list","p","type","then","prefab","prefabMap","set","push","Promise","all","console","log","update","render","renderActor","data","state","actors","id","am","actorMap","get","actor","setParent","addComponent","init"],"mappings":"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","sourcesContent":["import { Node } from \"cc\";\r\nimport { _decorator, Component } from \"cc\";\r\nimport DataManager from \"../Global/DataManager\";\r\nimport { JoyStickManager } from \"../UI/JoyStickManager\";\r\nimport { ActorManager } from \"../Entity/Actor/ActorManager\";\r\nimport { ResourceManager } from \"../Global/ResourceManager\";\r\nimport { Prefab } from \"cc\";\r\nimport { instantiate } from \"cc\";\r\nimport { PrefabPathEnum } from \"../Enum\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n    private _stage: Node;\r\n    private _ui: Node;\r\n    private shouldUpdate: boolean = false;\r\n\r\n    onLoad() {\r\n        this._stage = this.node.getChildByName('Stage');\r\n        this._ui    = this.node.getChildByName('UI');\r\n        this._stage.destroyAllChildren();\r\n        DataManager.Instance.jm = this._ui.getComponentInChildren(JoyStickManager);\r\n    }\r\n    \r\n    async start() {\r\n        await this.loadRes();\r\n        this.shouldUpdate = true;\r\n    }\r\n\r\n    async loadRes() {\r\n        const list = [];\r\n        for (const type in PrefabPathEnum) {\r\n            const p = ResourceManager.Instance.loadRes(PrefabPathEnum[type], Prefab).then(prefab => {\r\n                DataManager.Instance.prefabMap.set(type, prefab);\r\n            });\r\n            list.push(p);\r\n        }\r\n        \r\n        const p = await Promise.all(list);\r\n        console.log(p);\r\n    }\r\n    update() {\r\n        if(!this.shouldUpdate) {\r\n            return;\r\n        }\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        this.renderActor();\r\n    }\r\n\r\n    renderActor() {\r\n        for(const data of DataManager.Instance.state.actors) {\r\n            const {id, type} = data;\r\n            let am: ActorManager = DataManager.Instance.actorMap.get(id);\r\n            if(!am) {\r\n                const prefab = DataManager.Instance.prefabMap.get(type);\r\n                const actor  = instantiate(prefab);\r\n                actor.setParent(this._stage);\r\n                let am: ActorManager = actor.addComponent(ActorManager);\r\n                DataManager.Instance.actorMap.set(data.id, am);\r\n                am.init(data);\r\n            } else {\r\n                am.render(data);\r\n            }\r\n        }\r\n    }\r\n}"]}