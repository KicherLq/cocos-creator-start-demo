{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Scene/BattleManager.ts"],"names":["_decorator","Component","Prefab","instantiate","DataManager","JoyStickManager","ActorManager","ResourceManager","ccclass","property","BattleManager","_stage","_ui","shouldUpdate","onLoad","node","getChildByName","Instance","jm","getComponentInChildren","start","loadRes","list","p","then","prefab","prefabMap","set","push","Promise","all","update","render","renderActor","data","state","actors","am","actorMap","get","id","actor","setParent","addComponent","init"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAKZC,MAAAA,M,OAAAA,M;AACAC,MAAAA,W,OAAAA,W;;AALFC,MAAAA,W;;AACEC,MAAAA,e,iBAAAA,e;;AACAC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,e,iBAAAA,e;;;;;;;;;;;;;;;OAGH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBT,U;;+BAGjBU,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb,SACmCT,SADnC,CAC6C;AAAA;AAAA;AAAA,eACjCU,MADiC;AAAA,eAEjCC,GAFiC;AAAA,eAGjCC,YAHiC,GAGT,KAHS;AAAA;;AAKzCC,QAAAA,MAAM,GAAG;AACL,eAAKH,MAAL,GAAc,KAAKI,IAAL,CAAUC,cAAV,CAAyB,OAAzB,CAAd;AACA,eAAKJ,GAAL,GAAc,KAAKG,IAAL,CAAUC,cAAV,CAAyB,IAAzB,CAAd;AACA;AAAA;AAAA,0CAAYC,QAAZ,CAAqBC,EAArB,GAA0B,KAAKN,GAAL,CAASO,sBAAT;AAAA;AAAA,iDAA1B;AACH;;AAEDC,QAAAA,KAAK,GAAG;AACJ,eAAKC,OAAL;AACA,eAAKR,YAAL,GAAoB,IAApB;AACH;;AAEY,cAAPQ,OAAO,GAAG;AACZ,gBAAMC,IAAI,GAAG,EAAb,CADY,CAEZ;;AACA,gBAAMC,CAAC,GAAG;AAAA;AAAA,kDAAgBN,QAAhB,CAAyBI,OAAzB,CAAiC,cAAjC,EAAiDnB,MAAjD,EAAyDsB,IAAzD,CAA8DC,MAAM,IAAI;AAC9E;AAAA;AAAA,4CAAYR,QAAZ,CAAqBS,SAArB,CAA+BC,GAA/B,CAAmC,QAAnC,EAA6CF,MAA7C;AACH,WAFS,CAAV;AAGAH,UAAAA,IAAI,CAACM,IAAL,CAAUL,CAAV;AACA,gBAAMM,OAAO,CAACC,GAAR,CAAYR,IAAZ,CAAN;AACH;;AACDS,QAAAA,MAAM,GAAG;AACL,cAAG,CAAC,KAAKlB,YAAT,EAAuB;AACnB;AACH;;AACD,eAAKmB,MAAL;AACH;;AAEDA,QAAAA,MAAM,GAAG;AACL,eAAKC,WAAL;AACH;;AAEgB,cAAXA,WAAW,GAAG;AAChB,eAAI,MAAMC,IAAV,IAAkB;AAAA;AAAA,0CAAYjB,QAAZ,CAAqBkB,KAArB,CAA2BC,MAA7C,EAAqD;AACjD,gBAAIC,EAAgB,GAAG;AAAA;AAAA,4CAAYpB,QAAZ,CAAqBqB,QAArB,CAA8BC,GAA9B,CAAkCL,IAAI,CAACM,EAAvC,CAAvB;;AACA,gBAAG,CAACH,EAAJ,EAAQ;AACJ,oBAAMZ,MAAM,GAAG,MAAM;AAAA;AAAA,sDAAgBR,QAAhB,CAAyBI,OAAzB,CAAiC,cAAjC,EAAiDnB,MAAjD,CAArB;AACA,oBAAMuC,KAAK,GAAItC,WAAW,CAACsB,MAAD,CAA1B;AACAgB,cAAAA,KAAK,CAACC,SAAN,CAAgB,KAAK/B,MAArB;AACA,kBAAI0B,EAAgB,GAAGI,KAAK,CAACE,YAAN;AAAA;AAAA,+CAAvB;AACA;AAAA;AAAA,8CAAY1B,QAAZ,CAAqBqB,QAArB,CAA8BX,GAA9B,CAAkCO,IAAI,CAACM,EAAvC,EAA2CH,EAA3C;AACAA,cAAAA,EAAE,CAACO,IAAH,CAAQV,IAAR;AACH,aAPD,MAOO;AACHG,cAAAA,EAAE,CAACL,MAAH,CAAUE,IAAV;AACH;AACJ;AACJ;;AAlDwC,O","sourcesContent":["import { Node } from \"cc\";\r\nimport { _decorator, Component } from \"cc\";\r\nimport DataManager from \"../Global/DataManager\";\r\nimport { JoyStickManager } from \"../UI/JoyStickManager\";\r\nimport { ActorManager } from \"../Entity/Actor/ActorManager\";\r\nimport { ResourceManager } from \"../Global/ResourceManager\";\r\nimport { Prefab } from \"cc\";\r\nimport { instantiate } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n    private _stage: Node;\r\n    private _ui: Node;\r\n    private shouldUpdate: boolean = false;\r\n\r\n    onLoad() {\r\n        this._stage = this.node.getChildByName('Stage');\r\n        this._ui    = this.node.getChildByName('UI');\r\n        DataManager.Instance.jm = this._ui.getComponentInChildren(JoyStickManager);\r\n    }\r\n    \r\n    start() {\r\n        this.loadRes();\r\n        this.shouldUpdate = true;\r\n    }\r\n\r\n    async loadRes() {\r\n        const list = [];\r\n        //TODO 深入学习promise的使用\r\n        const p = ResourceManager.Instance.loadRes('prefab/Actor', Prefab).then(prefab => {\r\n            DataManager.Instance.prefabMap.set('Actor1', prefab);\r\n        });\r\n        list.push(p);\r\n        await Promise.all(list);\r\n    }\r\n    update() {\r\n        if(!this.shouldUpdate) {\r\n            return;\r\n        }\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        this.renderActor();\r\n    }\r\n\r\n    async renderActor() {\r\n        for(const data of DataManager.Instance.state.actors) {\r\n            let am: ActorManager = DataManager.Instance.actorMap.get(data.id);\r\n            if(!am) {\r\n                const prefab = await ResourceManager.Instance.loadRes('prefab/Actor', Prefab);\r\n                const actor  = instantiate(prefab);\r\n                actor.setParent(this._stage);\r\n                let am: ActorManager = actor.addComponent(ActorManager);\r\n                DataManager.Instance.actorMap.set(data.id, am);\r\n                am.init(data);\r\n            } else {\r\n                am.render(data);\r\n            }\r\n        }\r\n    }\r\n}"]}