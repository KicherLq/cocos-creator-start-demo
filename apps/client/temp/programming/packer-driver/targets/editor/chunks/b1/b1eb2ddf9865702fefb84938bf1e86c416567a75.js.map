{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Base/StateMachine.ts"],"names":["_decorator","Component","FsmParamTypeEnum","ccclass","getInitParamsTrigger","type","Trigger","value","getInitParamsNumber","Number","StateMachine","_currentState","params","Map","stateMachines","animationComponent","getParams","paramName","has","get","setParams","run","resetTrigger","currentState","newState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAuBC,MAAAA,S,OAAAA,S;;AAEvBC,MAAAA,gB,iBAAAA,gB;;;;;;;;;OACH;AAAEC,QAAAA;AAAF,O,GAAcH,U;;sCAWPI,oB,GAAuB,MAAM;AACtC,eAAO;AACHC,UAAAA,IAAI,EAAE;AAAA;AAAA,oDAAiBC,OADpB;AAEHC,UAAAA,KAAK,EAAE;AAFJ,SAAP;AAIH,O;;qCAEYC,mB,GAAsB,MAAM;AACrC,eAAO;AACHH,UAAAA,IAAI,EAAE;AAAA;AAAA,oDAAiBI,MADpB;AAEHF,UAAAA,KAAK,EAAE;AAFJ,SAAP;AAIH,O;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;yBAE8BG,Y,WAD7BP,OAAO,CAAC,cAAD,C,gBAAR,MAC8BO,YAD9B,SACmDT,SADnD,CAC6D;AAAA;AAAA;AAAA,eACjDU,aADiD,GACR,IADQ;AAAA,eAEzDC,MAFyD,GAErB,IAAIC,GAAJ,EAFqB;AAAA,eAGzDC,aAHyD,GAGH,IAAID,GAAJ,EAHG;AAAA,eAIzDE,kBAJyD;AAAA,eAKzDV,IALyD;AAAA;;AAOzDW,QAAAA,SAAS,CAACC,SAAD,EAAoB;AACzB,cAAI,KAAKL,MAAL,CAAYM,GAAZ,CAAgBD,SAAhB,CAAJ,EAAgC;AAC5B,mBAAO,KAAKL,MAAL,CAAYO,GAAZ,CAAgBF,SAAhB,EAA2BV,KAAlC;AACH;AACJ;;AAEDa,QAAAA,SAAS,CAACH,SAAD,EAAoBV,KAApB,EAA4C;AACjD,cAAI,KAAKK,MAAL,CAAYM,GAAZ,CAAgBD,SAAhB,CAAJ,EAAgC;AAC5B,iBAAKL,MAAL,CAAYO,GAAZ,CAAgBF,SAAhB,EAA2BV,KAA3B,GAAmCA,KAAnC;AACA,iBAAKc,GAAL;AACA,iBAAKC,YAAL;AACH;AACJ;;AAEe,YAAZC,YAAY,GAAG;AACf,iBAAO,KAAKZ,aAAZ;AACH;;AAEe,YAAZY,YAAY,CAACC,QAAD,EAAW;AACvB,cAAI,CAACA,QAAL,EAAe;AACX;AACH;;AACD,eAAKb,aAAL,GAAqBa,QAArB;;AACA,eAAKb,aAAL,CAAmBU,GAAnB;AACH;AAED;AACJ;AACA;;;AACIC,QAAAA,YAAY,GAAG;AACX,eAAK,MAAM,GAAGf,KAAH,CAAX,IAAwB,KAAKK,MAA7B,EAAqC;AACjC,gBAAIL,KAAK,CAACF,IAAN,KAAe;AAAA;AAAA,sDAAiBC,OAApC,EAA6C;AACzCC,cAAAA,KAAK,CAACA,KAAN,GAAc,KAAd;AACH;AACJ;AACJ;AAED;AACJ;AACA;;;AA9C6D,O","sourcesContent":["import { _decorator, Animation, Component } from \"cc\";\nimport { EntityTypeEnum } from \"../Common/Enum\";\nimport { FsmParamTypeEnum } from \"../Enum\";\nconst { ccclass } = _decorator;\nimport State from \"./State\";\nimport SubStateMachine from \"./SubStateMachine\";\n\ntype ParamsValueType = boolean | number;\n\nexport interface IParamsValue {\n    type: FsmParamTypeEnum;\n    value: ParamsValueType;\n}\n\nexport const getInitParamsTrigger = () => {\n    return {\n        type: FsmParamTypeEnum.Trigger,\n        value: false,\n    };\n};\n\nexport const getInitParamsNumber = () => {\n    return {\n        type: FsmParamTypeEnum.Number,\n        value: 0,\n    };\n};\n\n/***\n * 流动图\n * 1.entity的state或者direction改变触发setter\n * 2.setter里触发fsm的setParams方法\n * 3.setParams执行run方法（run方法由子类重写）\n * 4.run方法会更改currentState，然后触发currentState的setter\n * 5-1.如果currentState是子状态机，继续执行他的run方法，run方法又会设置子状态机的currentState，触发子状态run方法\n * 5-2.如果是子状态，run方法就是播放动画\n */\n\n/***\n * 有限状态机基类\n */\n@ccclass(\"StateMachine\")\nexport default abstract class StateMachine extends Component {\n    private _currentState: State | SubStateMachine = null;\n    params: Map<string, IParamsValue> = new Map();\n    stateMachines: Map<string, SubStateMachine | State> = new Map();\n    animationComponent: Animation;\n    type: EntityTypeEnum;\n\n    getParams(paramName: string) {\n        if (this.params.has(paramName)) {\n            return this.params.get(paramName).value;\n        }\n    }\n\n    setParams(paramName: string, value: ParamsValueType) {\n        if (this.params.has(paramName)) {\n            this.params.get(paramName).value = value;\n            this.run();\n            this.resetTrigger();\n        }\n    }\n\n    get currentState() {\n        return this._currentState;\n    }\n\n    set currentState(newState) {\n        if (!newState) {\n            return;\n        }\n        this._currentState = newState;\n        this._currentState.run();\n    }\n\n    /***\n     * 清空所有trigger\n     */\n    resetTrigger() {\n        for (const [, value] of this.params) {\n            if (value.type === FsmParamTypeEnum.Trigger) {\n                value.value = false;\n            }\n        }\n    }\n\n    /***\n     * 由子类重写，方法目标是根据当前状态和参数修改currentState\n     */\n    abstract init(...args: any[]): void;\n    abstract run(): void;\n}\n"]}