{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Scene/BattleManager.ts"],"names":["_decorator","Component","Prefab","instantiate","SpriteFrame","DataManager","JoyStickManager","ActorManager","ResourceManager","PrefabPathEnum","TexturePathEnum","EntityTypeEnum","ccclass","property","BattleManager","_stage","_ui","shouldUpdate","onLoad","node","getChildByName","destroyAllChildren","Instance","jm","getComponentInChildren","start","loadRes","initMap","prefab","prefabMap","get","Map","map","setParent","list","type","p","then","set","push","loadDir","spriteframes","textureMap","Promise","all","console","log","update","dt","render","tick","tickActor","data","state","actors","id","am","actorMap","renderActor","actor","addComponent","init"],"mappings":"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","sourcesContent":["import { Node } from \"cc\";\r\nimport { _decorator, Component } from \"cc\";\r\nimport DataManager from \"../Global/DataManager\";\r\nimport { JoyStickManager } from \"../UI/JoyStickManager\";\r\nimport { ActorManager } from \"../Entity/Actor/ActorManager\";\r\nimport { ResourceManager } from \"../Global/ResourceManager\";\r\nimport { Prefab } from \"cc\";\r\nimport { instantiate } from \"cc\";\r\nimport { PrefabPathEnum, TexturePathEnum } from \"../Enum\";\r\nimport { EntityTypeEnum } from \"../Common/Enum\";\r\nimport { SpriteFrame } from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n    private _stage: Node;\r\n    private _ui: Node;\r\n    private shouldUpdate: boolean = false;\r\n\r\n    onLoad() {\r\n        this._stage = this.node.getChildByName('Stage');\r\n        this._ui    = this.node.getChildByName('UI');\r\n        this._stage.destroyAllChildren();\r\n        DataManager.Instance.jm = this._ui.getComponentInChildren(JoyStickManager);\r\n    }\r\n    \r\n    async start() {\r\n        await this.loadRes();\r\n        this.initMap();\r\n        this.shouldUpdate = true;\r\n    }\r\n\r\n    initMap() {\r\n        const prefab = DataManager.Instance.prefabMap.get(EntityTypeEnum.Map);\r\n        const map = instantiate(prefab);\r\n        map.setParent(this._stage);\r\n    }\r\n\r\n    async loadRes() {\r\n        const list = [];\r\n        for (const type in PrefabPathEnum) {\r\n            const p = ResourceManager.Instance.loadRes(PrefabPathEnum[type], Prefab).then(prefab => {\r\n                DataManager.Instance.prefabMap.set(type, prefab);\r\n            });\r\n            list.push(p);\r\n        }\r\n\r\n        for (const type in TexturePathEnum) {\r\n            const p = ResourceManager.Instance.loadDir(TexturePathEnum[type], SpriteFrame).then(spriteframes => {\r\n                DataManager.Instance.textureMap.set(type, spriteframes);\r\n            });\r\n            list.push(p);\r\n        }\r\n        \r\n        const p = await Promise.all(list);\r\n        console.log(p);\r\n    }\r\n    \r\n    update(dt: number) {\r\n        if(!this.shouldUpdate) {\r\n            return;\r\n        }\r\n        this.render();\r\n        this.tick(dt);\r\n    }\r\n\r\n    tick(dt: number) {\r\n        this.tickActor(dt);\r\n    }\r\n    tickActor(dt: number) {\r\n        for (const data of DataManager.Instance.state.actors) {\r\n            const {id} = data;\r\n            let am: ActorManager = DataManager.Instance.actorMap.get(id);\r\n            am.tick(dt);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.renderActor();\r\n    }\r\n\r\n    renderActor() {\r\n        for(const data of DataManager.Instance.state.actors) {\r\n            const {id, type} = data;\r\n            let am: ActorManager = DataManager.Instance.actorMap.get(id);\r\n            if(!am) {\r\n                const prefab = DataManager.Instance.prefabMap.get(type);\r\n                const actor  = instantiate(prefab);\r\n                actor.setParent(this._stage);\r\n                let am: ActorManager = actor.addComponent(ActorManager);\r\n                DataManager.Instance.actorMap.set(data.id, am);\r\n                am.init(data);\r\n            } else {\r\n                am.render(data);\r\n            }\r\n        }\r\n    }\r\n}"]}