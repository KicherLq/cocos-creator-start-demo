{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Global/DataManager.ts"],"names":["DataManager","Singleton","ACTOR_SPEED","jm","actorMap","Map","state","actors","id","position","x","y","direction","Instance","GetInstance","applyInput","input","deltaTime","type","actor","find","e"],"mappings":";;;yCAOqBA,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPdC,MAAAA,S;;;;;;;AAKDC,MAAAA,W,GAAc,G;;yBAECF,W,GAAN,MAAMA,WAAN;AAAA;AAAA,kCAAoC;AAAA;AAAA;AAAA,eAK/CG,EAL+C;AAAA,eAM/CC,QAN+C,GAMT,IAAIC,GAAJ,EANS;AAAA,eAQ/CC,KAR+C,GAQ/B;AACZC,YAAAA,MAAM,EAAC,CACH;AACIC,cAAAA,EAAE,EAAE,CADR;AAEIC,cAAAA,QAAQ,EAAE;AACNC,gBAAAA,CAAC,EAAE,CADG;AAENC,gBAAAA,CAAC,EAAE;AAFG,eAFd;AAMIC,cAAAA,SAAS,EAAE;AACPF,gBAAAA,CAAC,EAAE,CADI;AAEPC,gBAAAA,CAAC,EAAE;AAFI;AANf,aADG;AADK,WAR+B;AAAA;;AAC/B,mBAARE,QAAQ,GAAG;AACrB,iBAAO,MAAMC,WAAN,EAAP;AACA;;AAqBEC,QAAAA,UAAU,CAACC,KAAD,EAAoB;AAC1B,gBAAM;AAACC,YAAAA,SAAD;AAAYL,YAAAA,SAAZ;AAAuBM,YAAAA,IAAvB;AAA6BV,YAAAA;AAA7B,cAAmCQ,KAAzC;AACA,gBAAMG,KAAK,GAAG,KAAKb,KAAL,CAAWC,MAAX,CAAkBa,IAAlB,CAAuBC,CAAC,IAAIA,CAAC,CAACb,EAAF,KAASA,EAArC,CAAd;AACAW,UAAAA,KAAK,CAACP,SAAN,GAAkBA,SAAlB;AAEAO,UAAAA,KAAK,CAACV,QAAN,CAAeC,CAAf,IAAoBE,SAAS,CAACF,CAAV,GAAcO,SAAd,GAA0Bf,WAA9C;AACAiB,UAAAA,KAAK,CAACV,QAAN,CAAeE,CAAf,IAAoBC,SAAS,CAACD,CAAV,GAAcM,SAAd,GAA0Bf,WAA9C;AACH;;AA/B8C,O","sourcesContent":["import Singleton from \"../Base/Singleton\";\nimport { IActorMove, IState } from \"../Common/State\";\nimport { ActorManager } from \"../Entity/Actor/ActorManager\";\nimport { JoyStickManager } from \"../UI/JoyStickManager\";\n\nconst ACTOR_SPEED = 100;\n\nexport default class DataManager extends Singleton {\n\tstatic get Instance() {\n\t\treturn super.GetInstance<DataManager>();\n\t}\n\n    jm: JoyStickManager;\n    actorMap: Map<number, ActorManager> = new Map();\n\n    state: IState = {\n        actors:[\n            { \n                id: 1, \n                position: {\n                    x: 0, \n                    y: 0\n                }, \n                direction: {\n                    x: 1, \n                    y: 0\n                },\n            },\n        ],\n    }\n\n    applyInput(input: IActorMove) {\n        const {deltaTime, direction, type, id} = input;\n        const actor = this.state.actors.find(e => e.id === id);\n        actor.direction = direction;\n        \n        actor.position.x += direction.x * deltaTime * ACTOR_SPEED;\n        actor.position.y += direction.y * deltaTime * ACTOR_SPEED;\n    }\n}\n"]}