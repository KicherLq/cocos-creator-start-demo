{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Base/StateMachineTemplate.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { _decorator, Animation, AnimationClip } from \"cc\";\n// import State from \"../../Base/State\";\n// import StateMachine, { getInitParamsTrigger } from \"../../Base/StateMachine\";\n// import { EntityTypeEnum } from \"../../Common\";\n// import { EntityStateEnum, ParamsNameEnum } from \"../../Enum\";\n// const { ccclass } = _decorator;\n\n// @ccclass(\"ActorStateMachine\")\n// export class ActorStateMachine extends StateMachine {\n//   init(type: EntityTypeEnum) {\n//     this.type = type;\n//     this.animationComponent = this.node.addComponent(Animation);\n//     this.initParams();\n//     this.initStateMachines();\n//     this.initAnimationEvent();\n//   }\n\n//   initParams() {\n//     this.params.set(ParamsNameEnum.Idle, getInitParamsTrigger());\n//     this.params.set(ParamsNameEnum.Run, getInitParamsTrigger());\n//   }\n\n//   initStateMachines() {\n//     this.stateMachines.set(ParamsNameEnum.Idle, new State(this, `${this.type}${EntityStateEnum.Idle}`, AnimationClip.WrapMode.Loop));\n//     this.stateMachines.set(ParamsNameEnum.Run, new State(this, `${this.type}${EntityStateEnum.Run}`, AnimationClip.WrapMode.Loop));\n//   }\n\n//   initAnimationEvent() {}\n\n//   run() {\n//     switch (this.currentState) {\n//       case this.stateMachines.get(ParamsNameEnum.Idle):\n//       case this.stateMachines.get(ParamsNameEnum.Run):\n//         if (this.params.get(ParamsNameEnum.Run).value) {\n//           this.currentState = this.stateMachines.get(ParamsNameEnum.Run);\n//         } else if (this.params.get(ParamsNameEnum.Idle).value) {\n//           this.currentState = this.stateMachines.get(ParamsNameEnum.Idle);\n//         } else {\n//           this.currentState = this.currentState;\n//         }\n//         break;\n//       default:\n//         this.currentState = this.stateMachines.get(ParamsNameEnum.Idle);\n//         break;\n//     }\n//   }\n// }\n"]}