{"version":3,"sources":["file:///C:/Users/ctwl/Downloads/cocos-nodejs-io-game-start-demo-master/apps/client/assets/Scripts/Global/EventManager.ts"],"names":["EventManager","Singleton","map","Map","Instance","GetInstance","on","event","cb","ctx","has","get","push","set","off","index","findIndex","i","splice","emit","params","forEach","apply","clear"],"mappings":";;;yCAQqBA,Y;;;;;;;;;;;;;;;;;;AARdC,MAAAA,S;;;;;;;yBAQcD,Y,GAAN,MAAMA,YAAN;AAAA;AAAA,kCAAqC;AAAA;AAAA;AAAA,eAKxCE,GALwC,GAKJ,IAAIC,GAAJ,EALI;AAAA;;AAC7B,mBAARC,QAAQ,GAAG;AAClB,iBAAO,MAAMC,WAAN,EAAP;AACH;;AAIDC,QAAAA,EAAE,CAACC,KAAD,EAAmBC,EAAnB,EAAiCC,GAAjC,EAA+C;AAC7C,cAAI,KAAKP,GAAL,CAASQ,GAAT,CAAaH,KAAb,CAAJ,EAAyB;AACrB,iBAAKL,GAAL,CAASS,GAAT,CAAaJ,KAAb,EAAoBK,IAApB,CAAyB;AAAEJ,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAzB;AACH,WAFD,MAEO;AACH,iBAAKP,GAAL,CAASW,GAAT,CAAaN,KAAb,EAAoB,CAAC;AAAEC,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAD,CAApB;AACH;AACJ;;AAEDK,QAAAA,GAAG,CAACP,KAAD,EAAmBC,EAAnB,EAAiCC,GAAjC,EAA+C;AAC9C,cAAI,KAAKP,GAAL,CAASQ,GAAT,CAAaH,KAAb,CAAJ,EAAyB;AACrB,kBAAMQ,KAAK,GAAG,KAAKb,GAAL,CAASS,GAAT,CAAaJ,KAAb,EAAoBS,SAApB,CAA+BC,CAAD,IAAOT,EAAE,KAAKS,CAAC,CAACT,EAAT,IAAeS,CAAC,CAACR,GAAF,KAAUA,GAA9D,CAAd;AACAM,YAAAA,KAAK,GAAG,CAAC,CAAT,IAAc,KAAKb,GAAL,CAASS,GAAT,CAAaJ,KAAb,EAAoBW,MAApB,CAA2BH,KAA3B,EAAkC,CAAlC,CAAd;AACH;AACJ;;AAEDI,QAAAA,IAAI,CAACZ,KAAD,EAAmB,GAAGa,MAAtB,EAAyC;AACzC,cAAI,KAAKlB,GAAL,CAASQ,GAAT,CAAaH,KAAb,CAAJ,EAAyB;AACrB,iBAAKL,GAAL,CAASS,GAAT,CAAaJ,KAAb,EAAoBc,OAApB,CAA4B,CAAC;AAAEb,cAAAA,EAAF;AAAMC,cAAAA;AAAN,aAAD,KAAiB;AACzCD,cAAAA,EAAE,CAACc,KAAH,CAASb,GAAT,EAAcW,MAAd;AACH,aAFD;AAGH;AACJ;;AAEDG,QAAAA,KAAK,GAAG;AACJ,eAAKrB,GAAL,CAASqB,KAAT;AACH;;AAhC+C,O","sourcesContent":["import Singleton from \"../Base/Singleton\";\nimport { EventEnum } from \"../Enum\";\n\ninterface IItem {\n    cb: Function;\n    ctx: unknown;\n}\n\nexport default class EventManager extends Singleton {\n    static get Instance() {\n        return super.GetInstance<EventManager>();\n    }\n\n    private map: Map<EventEnum, Array<IItem>> = new Map();\n\n    on(event: EventEnum, cb: Function, ctx: unknown) {\n        if (this.map.has(event)) {\n            this.map.get(event).push({ cb, ctx });\n        } else {\n            this.map.set(event, [{ cb, ctx }]);\n        }\n    }\n\n    off(event: EventEnum, cb: Function, ctx: unknown) {\n        if (this.map.has(event)) {\n            const index = this.map.get(event).findIndex((i) => cb === i.cb && i.ctx === ctx);\n            index > -1 && this.map.get(event).splice(index, 1);\n        }\n    }\n\n    emit(event: EventEnum, ...params: unknown[]) {\n        if (this.map.has(event)) {\n            this.map.get(event).forEach(({ cb, ctx }) => {\n                cb.apply(ctx, params);\n            });\n        }\n    }\n\n    clear() {\n        this.map.clear();\n    }\n}\n"]}